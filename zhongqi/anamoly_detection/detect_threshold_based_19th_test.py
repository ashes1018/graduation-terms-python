from __future__ import division
import numpy as np
import heapq
import math
import json
import datetime
import matplotlib.pyplot as plt
import requests
import http.client
import tornado.web
import tornado.ioloop
import socket




def load_data(url):
    f = open(url)
    line = f.readline()
    data2 = {}
    Data = []
    while line:
        data1 = []
        line = json.loads(line)
        startFreq = line['startFreq']
        stopFreq = line['stopFreq']

        collectorId = "1"

        time = line['time']
        # time = datetime.datetime.fromtimestamp(float(time) / 1000).strftime('%Y-%m-%d %H:%M:%S.%f')

        # if startFreq == '400':
        data = line['data'].split('[')[1]
        data_process = data[:len(data)-2]
        for i in data_process.split(','):
            data1.append(float(i))
        Data.append(data1)

        side_information = time + '|'+startFreq + '|'+stopFreq + '|' + collectorId
        # 返回”时间：data“的字典格式。
        data2[side_information] = data1
        # data1.clear()
        line = f.readline()
    # print(len(data2))
    return Data



def get_freq(data):
    pass

def get_statu(value, h):
    if value > h:
        return True
    else:
        return False

def get_meetingPlcaeId():
    pass

def get_DeviceId():
    pass

def get_warningStartTime(symbol, device_id, start_time,start_Freq, stop_Freq, point, centerFreq, anomaly_times):
    dict = {"symbol":symbol, "device_id":device_id,
            "start_time":start_time, "start_Freq":start_Freq, "stop_Freq":stop_Freq, "point_number":point,
            "centerFreq":centerFreq, "anomaly_times":anomaly_times}
    return json.dumps(dict)


def get_fullWarningInfo(symbol,  device_id, start_time, end_time,start_Freq, stop_Freq,
                        anomaly_point, centerFreq, anomaly_times, backAmp, warning_points):
    dict = {"symbol":symbol, "device_id":device_id,
            "start_time":start_time, "end_time":end_time, "start_Freq":start_Freq, "stop_Freq":stop_Freq,"anomaly_point":anomaly_point,
            "centerFreq":centerFreq, "anomaly_times":anomaly_times,"backAmp":backAmp, "warning_points":warning_points}
    return json.dumps(dict)


def http_post(url, values):
    headers = {'Content-Type': 'application/json'}
    response = requests.post(url, values, headers=headers)
    return response


def gen_threshold(url):
    Data = []
    with open(url) as f:
        line = f.readline()
        while line:
            line = json.loads(line)
            startFreq = line['startFreq']
            if startFreq == '30':
                data1 = []
                data = line['data'].split(']')[0]
                data_process = data[1:len(data)]
                for i in data_process.split(','):
                    data1.append(float(i))
                Data.append(data1)
            line = f.readline()

    threshold = []
    for j in range(len(Data[0])):
        b = []
        for i in range(len(Data)):
            b.append(Data[i][j])
        threshold.append(max(b))
    print(threshold)
    return threshold


def draw_point(point_list, count, time1, time2):
    x = range(len(point_list))
    y = point_list
    plt.figure()
    plt.plot(x, y)
    plt.title('anomaly at point:' + str(count) + '  from' + str(time1) + '  to' + str(time2))
    plt.xlabel("point list")
    plt.ylabel("energy value")
    plt.show()



# class detect(tornado.web.RequestHandler):
#     #
#     # def __init__(self, ):
#     #     pass






PORT = 9999
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  # 创建TCP socket对象
s.bind(('', PORT))  # 绑定地址
s.listen(1)  # 监听TCP，1代表：操作系统可以挂起(未处理请求时等待状态)的最大连接数量。该值至少为1
conn, addr = s.accept()  # 开始被动接受TCP客户端的连接。
print('连接的地址', repr(addr))


def get():
    threshold1 =  [42.0815, 37.054125, 45.231500000000004, 42.4605, 37.466, 40.640375000000006, 39.657875, 41.9345, 43.770125, 38.398125, 39.652875, 37.88075, 38.523375, 41.621375, 28.56175, 34.403999999999996, 41.003375000000005, 40.668875, 39.80875, 39.684875000000005, 45.665875, 44.1575, 40.0475, 38.0175, 39.9625, 38.414375, 45.142375, 42.88175, 40.2985, 39.923375, 38.8285, 41.01025, 43.740125, 42.519375000000004, 39.567375, 39.130875, 40.51775, 40.95575, 43.390874999999994, 44.561125, 36.778749999999995, 36.94775, 39.43925, 36.550250000000005, 34.83425, 42.350874999999995, 38.36525, 37.614125, 36.47275, 37.077625, 36.44825, 43.568749999999994, 38.679125, 36.39275, 38.92525, 34.391375000000004, 32.48525, 34.4285, 32.134875, 28.31275, 27.32925, 27.127125, 30.131999999999998, 32.113875, 33.854125, 33.911375, 33.15975, 32.467125, 32.287875, 34.353125000000006, 34.3915, 33.87975, 33.368, 33.4325, 34.346000000000004, 35.792500000000004, 34.519999999999996, 34.287, 33.991, 35.281625, 35.1395, 35.510875, 35.483375, 37.346875000000004, 38.14475, 37.871625, 36.9305, 32.503875, 36.154125, 40.63850000000001, 42.997375, 44.081, 43.66625, 43.72425, 44.198125, 44.80225, 45.425125, 44.922375, 41.804125, 42.150125, 43.618125, 42.61812499999999, 43.052375, 42.36925, 44.84, 44.322375, 44.0785, 44.623, 41.405, 44.764625, 43.530875, 40.33925, 35.169375, 45.07925, 44.511375, 43.59524999999999, 43.553125, 40.189625, 47.943375, 43.127874999999996, 42.226125, 46.403875, 44.084250000000004, 44.53075, 44.64875, 44.771875, 45.530875, 44.877125, 45.1905, 42.055375, 45.641375000000004, 47.416625, 40.485499999999995, 43.809625, 45.475125, 69.704875, 46.56399999999999, 44.337375, 47.826125, 46.77325, 46.602, 44.736000000000004, 44.641999999999996, 48.373, 47.733875, 44.69775, 45.971125, 49.450624999999995, 48.934875, 48.755875, 45.46487499999999, 47.25575, 49.738125000000004, 47.60925, 49.0025, 46.062625, 47.117374999999996, 50.973375000000004, 48.25075, 46.89725, 46.408874999999995, 47.4855, 48.28075, 48.7245, 51.135000000000005, 47.671375, 62.877, 62.966499999999996, 49.115875, 51.241125, 49.381750000000004, 49.499874999999996, 50.552875, 50.183125000000004, 51.397625, 49.6895, 49.837625, 50.905375, 50.974624999999996, 51.101749999999996, 50.221375, 50.690125, 51.660875, 51.27025, 47.835499999999996, 47.294375, 45.81, 51.224125, 52.500125000000004, 51.8105, 51.44475, 50.72825, 52.566874999999996, 52.788375, 52.07725, 52.182874999999996, 43.072375, 43.742000000000004, 39.5135, 40.098, 43.15325, 39.7995, 41.571999999999996, 43.686125000000004, 41.13912499999999, 41.277625, 38.923375, 40.0075, 38.93025, 32.454625, 35.717, 39.917875, 41.144, 38.9295, 40.15774999999999, 44.2275, 43.066625, 38.465625, 39.871249999999996, 37.793, 40.27075, 42.6905, 39.8195, 42.086125, 40.646874999999994, 41.294375, 42.64875, 45.19875, 45.67425, 44.771125, 42.745625000000004, 38.63175, 42.84025, 47.50375, 49.253375000000005, 50.455875, 50.581250000000004, 50.022625, 49.320375, 49.84775, 50.790875, 51.02975, 50.752750000000006, 50.713375, 52.098625, 52.450125, 52.578625, 51.491499999999995, 51.583875, 52.6215, 52.91525, 52.446625, 51.512625, 51.664874999999995, 53.26575, 53.642125, 52.024499999999996, 48.876125, 41.606125, 49.087375, 52.24249999999999, 53.896125, 53.826125, 53.074875, 52.531375000000004, 53.404875000000004, 53.952125, 53.751749999999994, 52.83562500000001, 53.126, 53.727375, 54.272999999999996, 53.913000000000004, 53.0905, 53.023625, 53.296124999999996, 53.89475, 53.672125, 52.434250000000006, 52.6305, 75.348125, 72.93175, 53.367000000000004, 51.359624999999994, 47.888625, 66.0335, 72.4195, 49.002375, 49.8935, 49.580124999999995, 47.1875, 46.548125, 71.60787499999999, 43.402125, 63.54875, 63.642250000000004, 37.54325, 32.56325, 36.96725, 75.95525, 75.739, 34.58775, 32.487375, 32.575625, 33.89875, 32.3225, 29.388749999999998, 34.112375, 34.2225, 31.453625000000002, 32.750875, 33.171499999999995, 33.348, 43.420125, 80.4785, 45.03812500000001, 36.507875, 33.767375, 34.285624999999996, 39.63825, 33.00575, 35.014625, 34.424125000000004, 31.746625, 78.793625, 67.732875, 34.231875, 33.90175, 85.1695, 62.196749999999994, 33.856375, 37.002250000000004, 30.4715, 30.25875, 32.574, 29.370625, 30.004375, 35.906625, 64.9135, 82.896, 52.265750000000004, 32.726375000000004, 33.595125, 36.17825, 42.449000000000005, 35.902125, 33.846125, 32.282875, 27.645, 67.27575, 69.6115, 28.361375, 33.6125, 46.743625, 27.806874999999998, 28.956125, 30.3135, 30.502375, 30.392375, 64.57675, 79.775, 31.203875, 31.366125, 31.561625000000003, 31.329375000000002, 31.329250000000002, 32.10425, 40.122625, 31.63075, 31.57025, 77.826375, 78.878375, 54.7555, 75.32975, 37.824125, 34.437875, 37.495875, 36.384125, 35.67775, 33.710499999999996, 30.713499999999996, 37.356125, 40.7075, 42.519375000000004, 41.879125, 42.327374999999996, 41.762875, 42.853125, 43.388625000000005, 44.478375, 43.46775, 45.844125, 47.292125, 44.168000000000006, 44.892875, 44.3095, 45.75025, 42.51112499999999, 44.390125, 42.94325, 45.121, 46.135999999999996, 42.658874999999995, 43.042625, 40.333, 40.04975, 44.345375000000004, 44.417625, 46.60075, 44.44775, 44.986625000000004, 44.927875, 43.86325, 45.421375, 43.7115, 44.596625, 43.70725, 44.572500000000005, 45.454875, 47.233124999999994, 44.15125, 44.581125, 45.46675, 45.432375, 46.098125, 43.706500000000005, 42.866125000000004, 43.07975, 46.601625, 49.58775, 50.642624999999995, 50.15825, 49.74025, 50.001749999999994, 50.438125, 50.95075, 50.587625, 50.744249999999994, 51.427625, 51.603624999999994, 52.490249999999996, 51.908125, 51.891125, 51.826625, 52.380250000000004, 52.903124999999996, 51.70075, 51.870875, 52.521125, 52.84875, 53.805125000000004, 51.43237499999999, 50.326625, 40.900875, 46.22625, 51.811, 54.09475, 53.415125, 53.371375, 52.151375, 52.892, 53.982375, 53.465625, 53.575, 53.32725, 53.37375, 54.281625, 53.719875, 53.973124999999996, 53.047000000000004, 52.561499999999995, 53.95675, 53.332750000000004, 53.32662499999999, 52.94775, 53.559, 54.385000000000005, 53.63125, 52.512, 46.764250000000004, 41.700625, 46.746375, 49.709250000000004, 50.413500000000006, 49.78425, 47.243125, 46.877500000000005, 45.991625, 34.03025, 34.117625000000004, 33.535125, 32.95275, 31.95725, 34.035875, 33.719125, 33.245374999999996, 32.832375, 32.91175, 34.147375000000004, 34.281875, 33.3785, 30.266125000000002, 27.17425, 29.862250000000003, 33.81425, 34.786875, 34.4165, 33.0135, 33.395125, 33.61725, 34.60725, 33.818375, 35.8405, 33.838499999999996, 34.0815, 34.08625, 32.68875, 32.753625, 33.189625, 33.557, 33.891125, 32.535625, 32.20575, 33.275125, 33.9695, 33.91, 32.08025, 31.065, 27.075625, 26.4925, 28.584125, 29.601375, 31.145125, 30.313875000000003, 29.301750000000002, 28.550624999999997, 29.435625, 30.286499999999997, 32.094125, 35.994625, 35.0745, 36.292125, 38.15925, 37.62325, 42.458375000000004, 41.337875000000004, 41.470625, 39.586625, 33.604375000000005, 39.03425, 44.17125, 45.591125000000005, 48.085750000000004, 45.162625, 46.941874999999996, 46.03875000000001, 46.529999999999994, 48.573125, 45.400875, 48.202749999999995, 47.14775, 47.70825000000001, 49.723375000000004, 46.548875, 49.28675, 47.991, 48.434625000000004, 50.123, 47.485749999999996, 49.399625, 48.268874999999994, 49.055499999999995, 51.2285, 47.769125, 47.1555, 37.594, 45.32775, 47.833875, 51.922125, 50.399125, 49.165124999999996, 50.686749999999996, 49.8365, 51.934125, 50.08775, 49.5075, 41.364375, 39.851, 38.236125, 39.890249999999995, 40.376125, 40.12, 39.289375, 39.13325, 41.87825, 40.65275, 42.51925, 40.20075, 40.429500000000004, 32.623000000000005, 34.067375, 41.441125, 41.66225, 41.721250000000005, 40.707375, 37.734, 41.726, 41.254, 40.053875000000005, 40.49525, 39.112874999999995, 38.5635, 42.025499999999994, 39.147875, 39.849000000000004, 37.994125, 41.539624999999994, 40.630625, 39.666125, 40.104375000000005, 41.721250000000005, 40.839999999999996, 41.428875, 41.5495, 42.929500000000004, 44.403875, 44.594875, 44.34975, 43.443375, 43.610375000000005, 44.377750000000006, 45.165499999999994, 44.432, 48.298500000000004, 45.946375, 45.6805, 46.73825, 45.436625, 45.12, 46.299625000000006, 47.116749999999996, 46.875625, 45.293124999999996, 45.299875, 46.933125000000004, 47.782625, 46.443875, 42.662125, 43.658625, 45.583375000000004, 46.741749999999996, 48.33, 47.710125000000005, 46.381750000000004, 46.330875000000006, 47.911625, 48.419875000000005, 47.859249999999996, 46.822125, 47.13525, 48.262875, 48.773625, 48.073375, 47.17375, 47.59875, 48.719, 48.04475, 47.513, 47.16725, 49.122, 49.426500000000004, 48.193625000000004, 47.937124999999995, 45.50275, 62.86525, 50.10375, 49.995000000000005, 48.065125, 47.410875, 49.4915, 50.123125, 49.688625, 48.076, 37.616125, 39.580375000000004, 42.294124999999994, 40.10925, 36.5985, 38.36025, 36.417125, 38.5405, 42.73375, 40.17875, 37.74825, 39.366625, 40.436249999999994, 37.46, 29.080625, 37.84725, 35.663375, 38.524875, 38.258250000000004, 37.649875, 42.88912500000001, 35.896625, 56.137499999999996, 49.577125, 37.860749999999996, 38.208, 42.79425, 39.997375000000005, 40.462625, 36.86175, 37.189125000000004, 41.71275, 41.196625, 39.614875, 38.801375, 38.633375, 35.436125000000004, 40.425125, 42.440875, 45.9685, 44.65975, 44.634625, 45.04537499999999, 43.049125000000004, 46.117625000000004, 44.626875000000005, 45.243125, 45.950874999999996, 43.75149999999999, 47.80225, 46.07725000000001, 46.484125, 46.8955, 45.35425, 48.31325, 46.859375, 45.329249999999995, 47.136250000000004, 46.083875, 49.106500000000004, 47.1635, 44.726125, 44.010375, 45.02074999999999, 47.052625, 47.75087499999999, 49.66675000000001, 49.149375, 46.258875, 55.339625000000005, 47.947874999999996, 49.543625000000006, 47.961124999999996, 48.1975, 48.825500000000005, 48.37375, 49.79025, 47.6925, 49.01675, 49.199875000000006, 48.293749999999996, 49.349875, 48.315374999999996, 49.949124999999995, 50.086625, 48.019499999999994, 50.00625, 46.71062499999999, 45.1885, 48.6025, 50.92875, 51.38012500000001, 49.71775, 49.7225, 50.53825, 51.301625, 51.643625, 50.424625, 40.527499999999996, 42.286125, 49.827000000000005, 42.175250000000005, 38.97525, 38.5795, 40.981125, 41.460125000000005, 37.888000000000005, 39.891999999999996, 42.490249999999996, 39.985875, 39.573125, 32.555625, 31.386375, 41.6605, 39.223625, 38.44375, 41.417125, 37.709125, 42.1815, 40.655125, 37.848625, 38.56425, 40.9115, 40.066625, 41.818999999999996, 40.73675, 39.810500000000005, 38.713375, 40.462375, 37.023625, 39.90875, 43.108250000000005, 36.635374999999996, 40.7675, 40.15625, 38.26525, 41.198875, 37.872, 35.41875, 37.2785, 34.474375, 35.963375, 40.701375000000006, 38.093125, 35.493375, 38.352374999999995, 36.951625, 36.39475, 36.902, 36.82275, 36.760999999999996, 36.89825, 32.243750000000006, 29.829124999999998, 29.962125, 28.489375, 28.386125, 27.710124999999998, 27.498749999999998, 28.901875, 30.37725, 31.021625, 31.06975, 30.76625, 31.099125, 32.977875, 32.14575, 32.35825, 32.7725, 32.216, 33.286875, 33.117875, 33.1225, 32.618625, 32.559, 33.571, 33.572125, 33.672375, 33.785, 35.38275, 36.846625, 38.036, 37.551874999999995, 37.27475, 33.353875, 34.936875, 39.21925, 41.904375, 42.748, 43.866, 42.64025, 42.740875, 43.76875, 44.04125, 45.4155, 43.00625, 37.774625, 45.92125, 43.607625, 37.688, 41.480125, 42.505875, 40.307500000000005, 41.6225, 42.639250000000004, 39.725875, 41.351625, 39.000375, 40.8345, 33.886375, 41.33825, 41.456375, 39.28725, 39.576625, 41.6885, 42.912, 41.05075, 41.113749999999996, 40.777625, 38.6575, 41.70025, 44.582750000000004, 38.0125, 43.69775, 39.872125, 38.808, 42.659124999999996, 39.847375, 41.983375, 41.511375, 39.29025, 39.752874999999996, 41.181875000000005, 43.642125, 40.70625, 38.530375, 37.633625, 35.9405, 39.107, 44.2475, 43.56475, 40.459125, 37.89275, 37.55675, 39.252250000000004, 42.46775, 41.517875000000004, 37.006625, 36.07875, 36.3845, 28.79975, 28.18825, 28.228624999999997, 28.265875, 27.88825, 27.542875000000002, 28.128, 29.378625, 31.089000000000002, 31.754875, 31.288625, 31.164875, 31.642000000000003, 32.0175, 32.963125, 33.45825, 33.48375, 32.31075, 33.01625, 33.227875, 34.721125, 32.573375, 33.82775, 34.214875, 34.522625, 34.3835, 34.653999999999996, 35.485125000000004, 36.152625, 37.1135, 36.81825, 35.2485, 34.983, 36.861000000000004, 40.68325, 42.185625, 42.21025, 41.774125, 42.20075, 43.187749999999994, 43.62650000000001, 44.01925, 42.915, 40.724875000000004, 44.246875, 38.571125, 41.993625, 35.848625, 36.938875, 38.315875, 39.442, 37.846375, 40.637875, 38.181, 38.848375000000004, 40.39275, 31.681124999999998, 33.240375, 41.544375, 37.40675, 37.432125, 38.89025, 36.4435, 38.7675, 38.326375, 39.201, 39.62625, 38.861625000000004, 37.55475, 37.606, 39.417249999999996, 38.32625, 39.200624999999995, 39.891999999999996, 37.764375, 38.992374999999996, 37.034, 39.27625, 35.928625, 40.089499999999994, 39.416125, 41.09325, 35.24275, 32.769, 35.96875, 33.708875, 35.9855, 40.28925, 39.471625, 33.4825, 38.636875]

    # 不同频段的阈值，麻烦徐老师放到下面的列表中
    threshold2 = [46.640499999999996, 45.016125, 44.47924999999999, 46.074374999999996, 47.06625, 45.78175, 46.065625, 45.422250000000005, 47.928, 44.808875, 41.863, 42.649499999999996, 44.602500000000006, 45.17225, 48.322500000000005, 46.916624999999996, 47.14475, 45.556374999999996, 48.59175, 46.423375, 47.598375, 46.911125, 48.73975, 46.67175, 47.7475, 47.2455, 48.238125, 46.620999999999995, 47.95775, 47.268125000000005, 48.738375, 43.847875, 47.555625, 48.489875, 47.488749999999996, 46.455875000000006, 48.542249999999996, 48.83725, 47.292375, 39.45175, 41.727, 38.04725, 36.82025, 38.058, 38.0875, 41.572125, 37.086, 36.686125000000004, 38.087125, 38.63275, 30.659375, 38.44675, 37.510125, 39.0835, 39.329625, 42.734375, 38.808, 37.954750000000004, 37.076625, 41.54725, 40.18325, 37.64175, 38.046, 39.103249999999996, 41.370125, 37.9785, 40.509625, 36.6045, 40.294125, 42.736375, 39.003875, 35.408750000000005, 34.161, 35.883625, 38.980875, 37.00125, 34.32375, 36.38575, 36.822, 40.062625, 36.166, 37.193, 38.729, 40.077749999999995, 42.31825, 40.524375, 37.601375, 38.45325, 43.092125, 47.338375, 46.677125000000004, 45.88725, 46.317375, 47.646, 47.034375, 47.567125, 46.72925, 48.774, 48.407375, 48.183499999999995, 47.334125, 49.27575, 48.994, 48.274375000000006, 48.476125, 49.826625, 49.61375, 45.55675, 40.93425, 48.68625, 50.014, 50.74175, 49.359, 49.879375, 50.315000000000005, 50.75075, 49.077875000000006, 50.869749999999996, 51.79925, 49.4555, 47.339, 47.378875, 49.53125, 46.10025, 47.53425, 46.99125000000001, 47.246625, 36.992625000000004, 46.91025, 49.232375, 50.227374999999995, 46.839875, 52.14750000000001, 48.46325, 46.463125, 45.884875, 47.2355, 50.227000000000004, 48.25512500000001, 48.23375, 47.591375, 49.59675, 48.569250000000004, 47.969375, 46.649, 48.298375, 50.670500000000004, 51.713125, 46.53575, 46.501000000000005, 46.108624999999996, 49.975750000000005, 46.839875, 47.601124999999996, 46.326499999999996, 49.115, 48.345625, 48.605875000000005, 46.429, 49.635625000000005, 47.732749999999996, 48.480375, 48.31125, 50.428, 47.669, 46.147, 44.072500000000005, 46.89725, 49.76625, 51.049749999999996, 49.525, 49.226124999999996, 49.812625, 50.940124999999995, 50.319250000000004, 49.2, 51.224, 51.472375, 50.265125, 49.151625, 50.80525, 50.074875, 49.618874999999996, 48.945499999999996, 51.46025, 49.501125, 46.37525, 46.90175, 49.595375, 46.906125, 48.257000000000005, 47.238249999999994, 49.391999999999996, 46.035624999999996, 37.010625, 37.045125, 38.322375, 37.009125, 41.064375, 38.184, 38.939125, 38.662375, 35.4745, 37.0115, 33.106375, 36.0325, 36.1395, 41.48287500000001, 38.100375, 38.5975, 41.28075, 38.42825, 39.332125, 37.684125, 37.04925, 35.587, 37.12025, 38.945750000000004, 41.522375, 41.13625, 39.590375, 40.485125000000004, 40.35325, 41.810125, 44.144625, 45.67075, 43.044124999999994, 44.7325, 45.6455, 44.262, 44.343875, 45.696374999999996, 47.176625, 45.349624999999996, 46.800875, 45.976749999999996, 47.902125, 45.571625, 46.873374999999996, 46.48975, 48.474000000000004, 46.18275, 42.29174999999999, 44.2125, 45.191875, 46.97225, 49.229375, 47.731624999999994, 47.785250000000005, 47.123875, 49.256375, 47.72087499999999, 48.390874999999994, 47.457874999999994, 49.537125, 48.77125, 48.469249999999995, 47.342000000000006, 49.143249999999995, 48.174375, 47.819, 48.421124999999996, 49.622749999999996, 45.918625000000006, 47.748125, 49.161, 48.705875, 47.324625, 48.6285, 49.208875, 49.148875, 41.6075, 39.184625, 41.447874999999996, 42.2715, 41.948375, 42.074375, 45.297875000000005, 44.096125, 41.664874999999995, 42.168375, 45.148875000000004, 48.1695, 49.648125, 47.702125, 48.021125, 50.287, 50.14775, 49.140499999999996, 49.347375, 50.692875, 48.954625, 49.922625, 48.876625000000004, 50.781625000000005, 48.857125, 49.873625, 49.02225, 51.2415, 49.086625, 48.501875, 50.204625, 50.9675, 51.048249999999996, 51.677499999999995, 50.680249999999994, 51.287875, 51.569125, 51.415499999999994, 52.09675, 52.87375, 52.625625, 51.762625, 52.874625, 53.396125000000005, 52.7795, 51.77225, 53.484375, 54.071375, 52.511875, 50.354749999999996, 50.059625, 52.9385, 54.454375, 53.8805, 53.014625, 54.612249999999996, 54.47, 53.9135, 53.938625, 55.024, 54.711875, 54.060125, 53.785875000000004, 54.56162499999999, 54.195874999999994, 53.172, 54.190250000000006, 54.927, 54.635875, 51.75874999999999, 49.336625, 50.426125, 49.45700000000001, 51.10575, 50.245625000000004, 50.524375, 49.145875, 48.079499999999996, 48.552375000000005, 49.38275, 48.512625, 48.04625, 48.282, 48.751125, 47.745875, 47.548125, 48.267625, 48.777125000000005, 47.698, 43.91525, 39.553124999999994, 42.27912500000001, 44.16575, 44.240500000000004, 42.588499999999996, 40.507125, 39.07925, 41.853625, 41.1755, 41.13825, 42.038624999999996, 41.095, 44.00175, 41.567499999999995, 42.266875, 41.041625, 42.420249999999996, 44.068875, 49.264, 45.13675, 48.150125, 45.290499999999994, 49.523875000000004, 45.71962499999999, 49.296625, 47.031, 50.8195, 46.98975, 50.148, 47.785374999999995, 51.562374999999996, 46.913625, 50.035999999999994, 48.3165, 52.11825, 46.183249999999994, 47.109750000000005, 46.46362500000001, 47.361374999999995, 52.69, 52.296125, 51.36725, 50.47075, 52.691375, 48.876999999999995, 52.123999999999995, 48.565875, 53.05799999999999, 49.467875, 51.96325, 48.77825, 52.572125, 49.218875000000004, 51.428374999999996, 49.860875, 53.165625, 49.336375, 47.734500000000004, 50.259, 50.724125, 50.148875000000004, 49.53, 50.452000000000005, 50.78125, 50.433125, 34.20375, 38.90125, 37.818, 38.266375, 40.083124999999995, 42.20975, 43.58825, 42.09875, 36.905125, 42.82899999999999, 46.62287499999999, 47.816625, 47.529, 46.845625, 47.413375, 47.968, 47.09325, 47.622749999999996, 48.478624999999994, 48.713875, 48.189125, 48.31225, 48.739375, 48.980375, 48.12649999999999, 47.768875, 49.437125, 49.38775, 48.248875, 43.993125, 43.35025, 48.163, 49.8595, 50.067375, 48.561125000000004, 48.779875, 49.684999999999995, 49.841625, 49.047875000000005, 49.57175, 50.202375, 49.727875, 49.325374999999994, 48.856, 49.690250000000006, 49.287124999999996, 48.638374999999996, 48.8935, 50.039625, 48.927375, 45.81425, 48.665875, 46.96424999999999, 47.125, 48.129125, 48.566250000000004, 47.530875, 47.242625000000004, 48.66975, 48.931125, 47.855999999999995, 47.577999999999996, 48.488875, 48.60525, 47.772625, 47.168875, 48.4245, 48.869875, 47.336, 43.418875, 41.681, 43.300375, 45.312374999999996, 45.02975, 45.201874999999994, 43.883625, 45.671749999999996, 32.769625, 32.963625, 33.334875, 33.157000000000004, 32.1315, 32.902, 32.120375, 32.52125, 32.2965, 32.589375000000004, 32.646, 31.23675, 30.101625, 31.735375, 31.704, 30.988625, 30.976374999999997, 31.312125, 31.19425, 31.002375, 31.3105, 34.489999999999995, 35.698375, 36.180375, 37.223375000000004, 40.260749999999994, 40.19125, 37.334, 32.90525, 41.21675, 43.55175, 45.191375, 42.738, 43.756375, 44.258875, 45.34725, 43.5135, 45.4495, 45.749874999999996, 46.779875000000004, 46.18575, 46.317750000000004, 47.202124999999995, 46.788999999999994, 46.262, 46.55875, 48.053749999999994, 46.077374999999996, 44.21825, 37.5175, 43.326874999999994, 46.372375000000005, 48.589625, 47.415124999999996, 47.13175, 46.2755, 48.497375, 47.74625, 47.649375000000006, 47.028375000000004, 49.048625, 47.941874999999996, 47.729625, 46.233250000000005, 48.672625, 47.607749999999996, 47.120375, 48.953125, 49.155499999999996, 46.989000000000004, 42.402625, 42.558499999999995, 44.30125, 44.801624999999994, 43.337624999999996, 43.876125, 45.926875, 34.545625, 33.302625, 37.961749999999995, 31.547125, 34.916875, 34.81, 36.56525, 38.51025, 37.166125, 35.6435, 36.154625, 30.41425, 37.24625, 34.677375, 34.965625, 35.724624999999996, 35.411500000000004, 36.368375, 34.184875, 35.512875, 36.299375, 36.001625000000004, 36.279125, 35.777375, 35.215875, 36.18875, 34.490875, 37.62525, 35.857375, 38.899499999999996, 34.847125, 34.446124999999995, 35.257, 31.684874999999998, 35.35775, 32.30525, 35.191125, 31.249, 36.839375, 32.866375, 31.733375000000002, 34.95825, 33.359625, 33.83625, 27.89275, 27.66825, 27.409625000000002, 27.020374999999998, 26.942875, 29.51375, 30.566125, 30.728749999999998, 30.27925, 30.639875, 31.47, 31.217125000000003, 31.553, 31.424500000000002, 31.861874999999998, 33.34375, 31.399625, 31.671499999999998, 32.174125000000004, 31.747999999999998, 32.8, 35.126374999999996, 36.882125, 36.220375, 33.905249999999995, 33.81075, 39.84375, 42.188, 43.009625, 42.255624999999995, 43.171749999999996, 43.582875, 47.38875, 48.31075, 48.234, 48.761250000000004, 48.714124999999996, 48.211625, 47.676125, 48.013875, 47.92637499999999, 47.4255, 47.6065, 48.049875, 47.842375, 44.591750000000005, 39.531625, 42.001375, 44.243875, 43.5945, 41.4755, 39.324, 39.7255, 37.45625, 37.64025, 40.84825000000001, 36.857875, 38.10325, 38.5, 39.12625, 37.57675, 36.90775, 41.116125, 40.488875, 38.926375, 36.0595, 35.71025, 34.534625, 35.171375, 35.4215, 35.977375, 34.750875, 35.1475, 36.8175, 36.2185, 35.691125, 34.102875, 34.061375, 36.541624999999996, 31.674375, 29.907, 28.183375, 33.267375, 36.505375, 35.97225, 35.877375, 35.560125, 36.970375, 36.01175, 36.890125, 36.93, 37.325375, 37.543125, 36.588750000000005, 37.446125, 38.069625, 37.256875, 36.516000000000005, 37.6345, 38.480875, 38.225875, 36.08125, 30.825874999999996, 37.978875, 41.360125, 42.592625, 45.26375, 42.23225, 43.6395, 43.533, 46.628, 48.352125, 48.8805, 47.230375, 45.956374999999994, 47.835499999999996, 48.187749999999994, 46.250375000000005, 45.333375000000004, 47.17675, 48.155625, 46.449749999999995, 44.205125, 39.793375000000005, 37.61975, 41.727, 42.741499999999995, 42.897625000000005, 39.994125, 39.345, 37.292375, 39.169, 38.92975, 35.263875, 37.009875, 38.5285, 42.352999999999994, 40.369375, 38.988, 36.86725, 39.383625, 42.627375, 33.964875, 36.239875, 33.31, 36.500125, 39.607375, 37.937124999999995, 36.23375, 34.19925, 39.757125, 36.58, 35.824875, 34.55625, 38.524125, 39.071625, 39.921875, 36.958875, 33.087375, 39.3265, 43.72125, 44.446625, 45.473, 42.487500000000004, 44.372749999999996, 45.336375000000004, 45.9655, 43.90925, 45.757625, 46.99575, 46.8215, 45.849624999999996, 46.121875, 47.510000000000005, 46.884750000000004, 46.190749999999994, 46.8175, 48.428250000000006, 47.21525, 39.19475, 41.885625, 47.554625, 49.17725, 47.674875, 46.331125, 49.316874999999996, 48.84925, 48.073875, 39.45225, 36.756, 36.9475, 34.686625, 39.219750000000005, 38.672625, 37.210375, 37.263625, 37.811125, 38.308499999999995, 36.126625, 31.427999999999997, 35.644999999999996, 41.28075, 36.726, 37.088375, 37.6085, 36.119, 39.666375, 35.543125, 39.211125, 39.428, 37.7335, 37.34425, 39.466125, 37.8395, 35.8585, 39.578125, 35.063125, 37.644375000000004, 37.99275, 33.053625000000004, 32.922625000000004, 34.78725, 35.889625, 34.543625, 34.76075, 33.860375, 34.567625, 33.3575, 34.792625, 35.04325, 37.051125, 27.8485, 27.039499999999997, 28.135374999999996, 26.984375, 26.291625, 26.831, 31.429875, 30.601124999999996, 29.808374999999998, 29.59275, 32.809875000000005, 30.532875, 31.028375, 30.245375000000003, 33.861374999999995, 31.5535, 30.430375, 30.371375, 32.46975, 31.767125, 31.22325, 32.615375, 34.293, 35.443125, 35.35625, 32.86175, 34.1155, 40.474500000000006, 41.865500000000004, 43.226375, 41.547625000000004, 42.895125, 43.141749999999995, 49.33525, 49.812000000000005, 49.180375, 50.574875, 49.66675000000001, 49.224, 48.64, 49.681375, 48.385749999999994, 48.5355, 48.76649999999999, 49.83475, 47.4605, 45.067875, 36.603249999999996, 42.498, 44.757625000000004, 45.4065, 42.663000000000004, 41.156125, 39.76925, 39.596375, 35.43275, 33.694625, 31.767125, 29.818875, 30.07275, 29.701375, 27.951375, 29.656875, 29.011375, 30.52325, 27.0825, 27.31875, 27.856875, 27.386, 30.079125, 27.995375, 27.842, 44.789625, 28.288875, 30.609875, 28.324625, 28.476875, 28.92325, 30.400624999999998, 30.3715, 29.078875000000004, 28.956125, 29.100375, 30.409000000000002, 31.735500000000002, 31.605500000000003, 31.168875, 32.57125, 32.430125, 32.58475, 32.698625, 33.71075, 32.90225, 34.09125, 32.879374999999996, 33.84175, 32.800375, 32.681, 33.3425, 36.928125, 36.60225, 36.36375, 35.45825, 32.58425, 38.769, 41.814875, 42.294124999999994, 44.354, 42.076750000000004, 43.10575, 44.177749999999996, 47.594874999999995, 47.346125, 48.337624999999996, 47.785250000000005, 47.566625, 46.950500000000005, 47.656625000000005, 46.9785, 46.464125, 46.468625, 47.805875, 46.643875, 42.809625000000004, 37.998125, 39.66475, 43.3845, 43.251625000000004, 40.582750000000004, 39.467625, 39.132, 39.462125, 36.86875, 39.96175, 36.866125, 36.930749999999996, 37.44225, 37.6465, 37.983125, 39.937625, 40.06025, 34.3215, 41.989625000000004, 34.752125, 37.788624999999996, 37.649499999999996, 36.112375, 37.9925, 34.921]


    threshold3 = []
    threshold4 = []
    threshold5 = []
    # 用于存储各个频段的阈值
    threshold_dict = {"30-500":threshold1,"500-1000":threshold2,"1000-2000":threshold3, "2000-4000":threshold4, "4000-6000":threshold5}


    l_1 = len(threshold1)
    l_2 = len(threshold2)
    l_3 = len(threshold3)
    l_4 = len(threshold4)
    l_5 = len(threshold5)


    # 对30-500频段的各变量设置
    # 监测列表用于记录每个频点处，大于对应阈值的次数，初始每个点处的次数都为0
    monitor_1 = [0] * l_1
    # 缓存每个频点处的告警值
    point_cache_1 = [[] for x in range(l_1)]
    # 记录告警的时间，便于定位告警出现的时间
    Time_1 = [[] for x in range(l_1)]

    # 对500-1000频段的各变量设置
    monitor_2 = [0] * l_2
    point_cache_2 = [[] for x in range(l_2)]
    Time_2 = [[] for x in range(l_2)]

    # 对1000-2000频段的各变量设置
    monitor_3 = [0] * l_3
    point_cache_3 = [[] for x in range(l_3)]
    Time_3 = [[] for x in range(l_3)]

    # 对2000-4000频段的各变量设置
    monitor_4 = [0] * l_4
    point_cache_4 = [[] for x in range(l_4)]
    Time_4 = [[] for x in range(l_4)]

    # 对4000-6000频段的各变量设置
    monitor_5 = [0] * l_5
    point_cache_5 = [[] for x in range(l_5)]
    Time_5 = [[] for x in range(l_5)]

    f_under = open("D:/qdfh/warning/under_warning.txt",'a')
    f_full = open("D:/qdfh/warning/full_warning.txt", 'a')

    try:
        while 1:
            data = conn.recv(10000)

            if not data:
                print("连接中断")
                break

            data = str(data)

            time = data.split('|')[1]
            collectorId = data.split('|')[2]
            startFreq = data.split('|')[3]
            stopFreq = data.split('|')[4]
            rbw = data.split('|')[5]
            pointNum = data.split('|')[9]
            value = data.split('|')[10]
            value_process = value[1:len(value)-4]

            v = []
            for k in value_process.split(','):
                v.append(float(k))


            if startFreq == '30':
                # count用于对一条数据的维数进行计数
                count_1 = 0
                # 对每条待比较数据和阈值中的每个频点的比较

                while count_1 < l_1:
                    count_value = v[count_1]
                    # 如果对应频点大于阈值
                    if count_value > threshold1[count_1]:
                        # 监测频点处的告警次数加1
                        monitor_1[count_1] += 1
                        # 将异常频点值加入对应列表，供后续画图
                        point_cache_1[count_1].append(count_value)
                        # 如果某频点处大于阈值，且大于阈值的次数大于5次，记录下当前的时间
                        if count_value > threshold1[count_1] and monitor_1[count_1] > 10:
                            Time_1[count_1].append(time)
                            # Time.append(time)
                            warning_start = get_warningStartTime("under warning", collectorId, time, startFreq,
                                                                 stopFreq, count_1,
                                                                 count_1/l_1 * (float(stopFreq)-float(startFreq))+float(startFreq),monitor_1[count_1])
                            print(warning_start)
                            f_under.write(warning_start + "\n")
                            f_under.flush()
                            great_count = 1
                            max_point = count_value


                            if count_1 > 5:
                                for k in range(count_1-5, count_1+5):
                                    if v[k] > threshold1[k]:
                                        great_count += 1
                                        max_point = max(max_point, v[k])

                                if great_count >= 2:
                                    count_1 = count_1 + 5
                                    for x in range(count_1 + 1, count_1 + 3):
                                        monitor_1[x] =  0
                                        point_cache_1[x].clear()
                                    continue


                    # 如果对应频点小于阈值
                    if count_value < threshold1[count_1]:
                        # 如果当前频点小于阈值但出现大于阈值的次数大于5
                        if count_value < threshold1[count_1] and monitor_1[count_1] > 10:

                            # 一次告警结束，给出完整告警信息
                            fullWarningInfo = get_fullWarningInfo("end warning", collectorId, Time_1[count_1][0], time, startFreq, stopFreq,
                                                                  count_1, count_1/l_1 * (float(stopFreq)-float(startFreq))+float(startFreq),
                                                                  monitor_1[count_1], threshold1[count_1], point_cache_1[count_1])

                            print(fullWarningInfo)
                            f_full.write(fullWarningInfo+"\n")
                            f_full.flush()
                            # 告警结束，将该频点超过阈值的次数置零
                            monitor_1[count_1] = 0

                            # 一次告警结束，异常频点列表清零
                            point_cache_1[count_1].clear()

                        #   如果出现的是小量超过阈值的情况，可认为不是告警。此时，对应频点告警数置0，对应告警缓存清空。
                        elif count_value < threshold1[count_1] and 0 < monitor_1[count_1] <= 10:
                            monitor_1[count_1] = 0
                            point_cache_1[count_1].clear()
                        Time_1[count_1].clear()
                    # 对下一个频点进行检测
                    count_1 += 1
                # 一轮检测结束,count置0



            if startFreq == '500':
                # count用于对一条数据的维数进行计数
                count_2 = 0
                # 对每条待比较数据和阈值中的每个频点的比较

                while count_2 < l_2:
                    count_value = v[count_2]
                    # 如果对应频点大于阈值
                    if count_value > threshold2[count_2]:
                        # 监测频点处的告警次数加1
                        monitor_2[count_2] += 1
                        # 将异常频点值加入对应列表，供后续画图
                        point_cache_2[count_2].append(count_value)
                        # 如果某频点处大于阈值，且大于阈值的次数大于5次，记录下当前的时间
                        if count_value > threshold2[count_2] and monitor_2[count_2] > 10:
                            Time_2[count_2].append(time)
                            # Time.append(time)
                            warning_start = get_warningStartTime("under warning", collectorId, time, startFreq,
                                                                 stopFreq, count_2,
                                                                 count_2 / l_2 * (float(stopFreq) - float(startFreq)) + float(
                                                                     startFreq), monitor_2[count_2])
                            print(warning_start)
                            f_under.write(warning_start + "\n")
                            f_under.flush()
                            great_count = 1
                            max_point = count_value

                            if count_2 > 5:
                                for k in range(count_2 - 5, count_2 + 5):
                                    if v[k] > threshold2[k]:
                                        great_count += 1
                                        max_point = max(max_point, v[k])

                                if great_count >= 2:
                                    count_2 = count_2 + 5
                                    for x in range(count_2 + 1, count_2 + 3):
                                        monitor_2[x] = 0
                                        point_cache_2[x].clear()
                                    continue

                    # 如果对应频点小于阈值
                    if count_value < threshold2[count_2]:
                        # 如果当前频点小于阈值但出现大于阈值的次数大于5
                        if count_value < threshold2[count_2] and monitor_2[count_2] > 10:


                            # 一次告警结束，给出完整告警信息
                            # print(Time[count])
                            fullWarningInfo = get_fullWarningInfo("end warning", collectorId, Time_2[count_2][0], time,
                                                                  startFreq, stopFreq,
                                                                  count_2, count_2 / l_2 * (
                                                                  float(stopFreq) - float(startFreq)) + float(startFreq),
                                                                  monitor_2[count_2], threshold2[count_2], point_cache_2[count_2])


                            print(fullWarningInfo)
                            f_full.write(fullWarningInfo+"\n")
                            f_full.flush()
                            # 告警结束，将该频点超过阈值的次数置零
                            monitor_2[count_2] = 0

                            # 一次告警结束，异常频点列表清零
                            point_cache_2[count_2].clear()

                        # 如果出现的是小量超过阈值的情况，可认为不是告警。此时，对应频点告警数置0，对应告警缓存清空。
                        elif count_value < threshold2[count_2] and 0 < monitor_2[count_2] <= 10:
                            monitor_2[count_2] = 0
                            point_cache_2[count_2].clear()
                        Time_2[count_2].clear()
                    # 对下一个频点进行检测
                    count_2 += 1
                    # 一轮检测结束,count置0


            if startFreq == '1000':
                # count用于对一条数据的维数进行计数
                count_3 = 0
                # 对每条待比较数据和阈值中的每个频点的比较

                while count_3 < l_3:
                    count_value = v[count_3]
                    # 如果对应频点大于阈值
                    if count_value > threshold3[count_3]:
                        # 监测频点处的告警次数加1
                        monitor_3[count_3] += 1
                        # 将异常频点值加入对应列表，供后续画图
                        point_cache_3[count_3].append(count_value)
                        # 如果某频点处大于阈值，且大于阈值的次数大于5次，记录下当前的时间
                        if count_value > threshold3[count_3] and monitor_3[count_3] > 10:
                            Time_3[count_3].append(time)
                            # Time.append(time)
                            warning_start = get_warningStartTime("under warning", collectorId, time, startFreq,
                                                                 stopFreq, count_3,
                                                                 count_3/l_3 * (float(stopFreq)-float(startFreq))+float(startFreq),monitor_3[count_3])
                            print(warning_start)
                            f_under.write(warning_start + "\n")
                            f_under.flush()
                            great_count = 1
                            max_point = count_value


                            if count_3 > 5:
                                for k in range(count_3-5, count_3+5):
                                    if v[k] > threshold3[k]:
                                        great_count += 1
                                        max_point = max(max_point, v[k])

                                if great_count >= 2:
                                    count_3 = count_3 + 5
                                    for x in range(count_3 + 1, count_3 + 3):
                                        monitor_3[x] =  0
                                        point_cache_3[x].clear()
                                    continue


                    # 如果对应频点小于阈值
                    if count_value < threshold3[count_3]:
                        # 如果当前频点小于阈值但出现大于阈值的次数大于5
                        if count_value < threshold3[count_3] and monitor_3[count_3] > 10:

                            # 一次告警结束，给出完整告警信息
                            fullWarningInfo = get_fullWarningInfo("end warning", collectorId, Time_3[count_3][0], time, startFreq, stopFreq,
                                                                  count_3, count_3/l_3 * (float(stopFreq)-float(startFreq))+float(startFreq),
                                                                  monitor_3[count_3], threshold3[count_3], point_cache_3[count_3])

                            print(fullWarningInfo)
                            f_full.write(fullWarningInfo+"\n")
                            f_full.flush()
                            # 告警结束，将该频点超过阈值的次数置零
                            monitor_3[count_3] = 0

                            # 一次告警结束，异常频点列表清零
                            point_cache_3[count_3].clear()

                        #   如果出现的是小量超过阈值的情况，可认为不是告警。此时，对应频点告警数置0，对应告警缓存清空。
                        elif count_value < threshold3[count_3] and 0 < monitor_3[count_3] <= 10:
                            monitor_3[count_3] = 0
                            point_cache_3[count_3].clear()
                        Time_3[count_3].clear()
                    # 对下一个频点进行检测
                    count_3 += 1
                # 一轮检测结束,count置0

            if startFreq == '2000':
                # count用于对一条数据的维数进行计数
                count_4 = 0
                # 对每条待比较数据和阈值中的每个频点的比较

                while count_4 < l_4:
                    count_value = v[count_4]
                    # 如果对应频点大于阈值
                    if count_value > threshold4[count_4]:
                        # 监测频点处的告警次数加1
                        monitor_4[count_4] += 1
                        # 将异常频点值加入对应列表，供后续画图
                        point_cache_4[count_4].append(count_value)
                        # 如果某频点处大于阈值，且大于阈值的次数大于5次，记录下当前的时间
                        if count_value > threshold4[count_4] and monitor_4[count_4] > 10:
                            Time_4[count_4].append(time)
                            # Time.append(time)
                            warning_start = get_warningStartTime("under warning", collectorId, time, startFreq,
                                                                 stopFreq, count_4,
                                                                 count_4/l_4 * (float(stopFreq)-float(startFreq))+float(startFreq),monitor_4[count_4])
                            print(warning_start)
                            f_under.write(warning_start + "\n")
                            f_under.flush()
                            great_count = 1
                            max_point = count_value


                            if count_4 > 5:
                                for k in range(count_4-5, count_4+5):
                                    if v[k] > threshold4[k]:
                                        great_count += 1
                                        max_point = max(max_point, v[k])

                                if great_count >= 2:
                                    count_4 = count_4 + 5
                                    for x in range(count_4 + 1, count_4 + 3):
                                        monitor_4[x] =  0
                                        point_cache_4[x].clear()
                                    continue


                    # 如果对应频点小于阈值
                    if count_value < threshold4[count_4]:
                        # 如果当前频点小于阈值但出现大于阈值的次数大于5
                        if count_value < threshold4[count_4] and monitor_4[count_4] > 10:

                            # 一次告警结束，给出完整告警信息
                            fullWarningInfo = get_fullWarningInfo("end warning", collectorId, Time_4[count_4][0], time, startFreq, stopFreq,
                                                                  count_4, count_4/l_4 * (float(stopFreq)-float(startFreq))+float(startFreq),
                                                                  monitor_4[count_4], threshold4[count_4], point_cache_4[count_4])

                            print(fullWarningInfo)
                            f_full.write(fullWarningInfo+"\n")
                            f_full.flush()
                            # 告警结束，将该频点超过阈值的次数置零
                            monitor_4[count_4] = 0

                            # 一次告警结束，异常频点列表清零
                            point_cache_4[count_4].clear()

                        #   如果出现的是小量超过阈值的情况，可认为不是告警。此时，对应频点告警数置0，对应告警缓存清空。
                        elif count_value < threshold4[count_4] and 0 < monitor_4[count_4] <= 10:
                            monitor_4[count_4] = 0
                            point_cache_4[count_4].clear()
                        Time_4[count_4].clear()
                    # 对下一个频点进行检测
                    count_4 += 1
                # 一轮检测结束,count置0

            if startFreq == '4000':
                # count用于对一条数据的维数进行计数
                count_5 = 0
                # 对每条待比较数据和阈值中的每个频点的比较

                while count_5 < l_5:
                    count_value = v[count_5]
                    # 如果对应频点大于阈值
                    if count_value > threshold5[count_5]:
                        # 监测频点处的告警次数加1
                        monitor_5[count_5] += 1
                        # 将异常频点值加入对应列表，供后续画图
                        point_cache_5[count_5].append(count_value)
                        # 如果某频点处大于阈值，且大于阈值的次数大于5次，记录下当前的时间
                        if count_value > threshold5[count_5] and monitor_5[count_5] > 10:
                            Time_5[count_5].append(time)
                            # Time.append(time)
                            warning_start = get_warningStartTime("under warning", collectorId, time, startFreq,
                                                                 stopFreq, count_5,
                                                                 count_5/l_5 * (float(stopFreq)-float(startFreq))+float(startFreq),monitor_5[count_5])
                            print(warning_start)
                            f_under.write(warning_start + "\n")
                            f_under.flush()
                            great_count = 1
                            max_point = count_value


                            if count_5 > 5:
                                for k in range(count_5-5, count_5+5):
                                    if v[k] > threshold5[k]:
                                        great_count += 1
                                        max_point = max(max_point, v[k])

                                if great_count >= 2:
                                    count_5 = count_5 + 5
                                    for x in range(count_5 + 1, count_5 + 3):
                                        monitor_5[x] =  0
                                        point_cache_5[x].clear()
                                    continue


                    # 如果对应频点小于阈值
                    if count_value < threshold5[count_5]:
                        # 如果当前频点小于阈值但出现大于阈值的次数大于5
                        if count_value < threshold5[count_5] and monitor_5[count_5] > 10:

                            # 一次告警结束，给出完整告警信息
                            fullWarningInfo = get_fullWarningInfo("end warning", collectorId, Time_5[count_5][0], time, startFreq, stopFreq,
                                                                  count_5, count_5/l_5 * (float(stopFreq)-float(startFreq))+float(startFreq),
                                                                  monitor_5[count_5], threshold5[count_5], point_cache_5[count_5])

                            print(fullWarningInfo)
                            f_full.write(fullWarningInfo+"\n")
                            f_full.flush()
                            # 告警结束，将该频点超过阈值的次数置零
                            monitor_5[count_5] = 0

                            # 一次告警结束，异常频点列表清零
                            point_cache_5[count_5].clear()

                        #   如果出现的是小量超过阈值的情况，可认为不是告警。此时，对应频点告警数置0，对应告警缓存清空。
                        elif count_value < threshold5[count_5] and 0 < monitor_5[count_5] <= 10:
                            monitor_5[count_5] = 0
                            point_cache_5[count_5].clear()
                        Time_5[count_5].clear()
                    # 对下一个频点进行检测
                    count_5 += 1
                # 一轮检测结束,count置0


        f_full.close()
        f_under.close()




    except:
        print("连接中断，请重新运行检测程序！")


if __name__ == '__main__':
    get()







