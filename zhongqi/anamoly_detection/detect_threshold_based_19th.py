from __future__ import division
import numpy as np
import heapq
import math
import json
import datetime
import matplotlib.pyplot as plt
import requests
import http.client
import tornado.web
import tornado.ioloop





def load_data(url):
    f = open(url)
    line = f.readline()
    data2 = {}
    while line:
        data1 = []
        line = json.loads(line)
        startFreq = line['startFreq']
        stopFreq = line['stopFreq']

        collectorId = line['collectorId']

        time = line['traceInTime']
        # time = datetime.datetime.fromtimestamp(float(time) / 1000).strftime('%Y-%m-%d %H:%M:%S.%f')

        if startFreq == '400':
            data = line['data'].split('[')[1]
            data_process = data[:len(data)-2]
            for i in data_process.split(','):
                data1.append(float(i))

        side_information = time + '|'+startFreq + '|'+stopFreq + '|' + collectorId
        # 返回”时间：data“的字典格式。
        data2[side_information] = data1
        # data1.clear()
        line = f.readline()
    # print(len(data2))
    return data2



def get_freq(data):
    pass

def get_statu(value, h):
    if value > h:
        return True
    else:
        return False

def get_meetingPlcaeId():
    pass

def get_DeviceId():
    pass

def get_warningStartTime(symbol, place_id, device_id, start_time,start_Freq, stop_Freq, point, anomaly_times):
    dict = {"symbol":symbol,"place_id":place_id,"device_id":device_id,
            "start_time":start_time, "start_Freq":start_Freq, "stop_Freq":stop_Freq, "point_number":point, "anomaly_times":anomaly_times}
    return json.dumps(dict)


def get_fullWarningInfo(symbol, place_id, device_id, start_time, end_time,start_Freq, stop_Freq,
                        anomaly_point, anomaly_times, backAmp, warning_points):
    dict = {"symbol":symbol, "place_id":place_id, "device_id":device_id,
            "start_time":start_time, "end_time":end_time, "start_Freq":start_Freq, "stop_Freq":stop_Freq,"anomaly_point":anomaly_point,
            "anomaly_times":anomaly_times,"backAmp":backAmp, "warning_points":warning_points}
    return json.dumps(dict)


def http_post(url, values):
    headers = {'Content-Type': 'application/json'}
    response = requests.post(url, values, headers=headers)
    return response


def gen_threshold(url):
    Data = []
    with open(url) as f:
        line = f.readline()
        while line:
            line = json.loads(line)
            startFreq = line['startFreq']
            if startFreq == '30':
                data1 = []
                data = line['data'].split(']')[0]
                data_process = data[1:len(data)]
                for i in data_process.split(','):
                    data1.append(float(i))
                Data.append(data1)
            line = f.readline()

    threshold = []
    for j in range(len(Data[0])):
        b = []
        for i in range(len(Data)):
            b.append(Data[i][j])
        threshold.append(max(b))
    print(threshold)
    return threshold


def draw_point(point_list, count, time1, time2):
    x = range(len(point_list))
    y = point_list
    plt.figure()
    plt.plot(x, y)
    plt.title('anomaly at point:' + str(count) + '  from' + str(time1) + '  to' + str(time2))
    plt.xlabel("point list")
    plt.ylabel("energy value")
    plt.show()



# class detect(tornado.web.RequestHandler):
#     #
#     # def __init__(self, ):
#     #     pass


def get():
    threshold = [28.704250000000002, 28.73475, 28.46, 28.276875, 28.4295, 27.727375, 28.124250000000004, 27.055875, 27.819, 27.483249999999998, 27.696875, 26.842125000000003, 28.002125000000003, 27.696875, 28.704250000000002, 28.704250000000002, 28.82625, 27.7885, 27.025375, 27.666375, 25.4685, 25.499125, 26.99475, 26.353749999999998, 27.116875, 27.147375, 26.598000000000003, 25.68225, 25.529625, 26.414875000000002, 26.170624999999998, 24.094875000000002, 24.705374999999997, 25.438000000000002, 24.949625, 26.353749999999998, 26.598000000000003, 26.598000000000003, 27.116875, 25.834875, 28.246375, 26.659000000000002, 28.643125, 28.399, 29.528374999999997, 27.452624999999998, 27.666375, 26.87275, 28.612625, 29.742, 31.84825, 33.130375, 28.73475, 28.82625, 29.803125, 30.444125, 26.93375, 28.887375, 27.2695, 27.361125, 28.124250000000004, 27.819, 27.9105, 29.0705, 27.116875, 26.720125000000003, 27.8495, 26.567500000000003, 27.025375, 25.68225, 26.231624999999998, 26.384249999999998, 26.201124999999998, 27.025375, 26.445375000000002, 28.582125, 25.621125, 25.3465, 25.529625, 26.506375000000002, 26.720125000000003, 26.384249999999998, 25.04125, 24.919125, 25.529625, 27.605249999999998, 26.048499999999997, 25.926375, 26.536875000000002, 27.086375, 26.720125000000003, 26.99475, 28.21575, 27.941125000000003, 27.727375, 28.4295, 28.4295, 26.99475, 28.307375, 28.276875, 30.3525, 29.0095, 29.101, 28.09375, 28.887375, 27.605249999999998, 27.7885, 27.086375, 26.96425, 26.99475, 26.048499999999997, 26.781125000000003, 28.73475, 26.109624999999998, 27.483249999999998, 26.99475, 25.07175, 27.116875, 26.720125000000003, 26.720125000000003, 25.865375, 25.77375, 26.720125000000003, 26.048499999999997, 27.330624999999998, 26.99475, 25.590625, 25.590625, 24.46125, 25.590625, 26.140124999999998, 26.90325, 26.109624999999998, 32.184, 27.422125, 27.239, 26.231624999999998, 26.96425, 31.84825, 27.330624999999998, 27.8495, 28.21575, 27.8495, 26.536875000000002, 27.941125000000003, 28.673625, 28.673625, 27.7885, 28.399, 29.497874999999997, 29.528374999999997, 29.0705, 29.436749999999996, 28.73475, 27.727375, 26.96425, 27.513749999999998, 26.720125000000003, 26.842125000000003, 28.978875, 27.361125, 26.567500000000003, 26.414875000000002, 29.04, 26.109624999999998, 26.598000000000003, 25.590625, 26.262249999999998, 26.262249999999998, 25.77375, 25.77375, 25.285375000000002, 24.796999999999997, 24.644374999999997, 25.74325, 25.68225, 25.895875, 25.377000000000002, 25.13275, 26.140124999999998, 25.499125, 26.90325, 27.147375, 26.628500000000003, 27.2695, 25.13275, 27.757875, 28.124250000000004, 26.99475, 28.063125000000003, 27.819, 26.750625, 27.574749999999998, 27.8495, 28.704250000000002, 28.76525, 32.275625, 33.405, 33.954499999999996, 34.87025, 37.800625000000004, 37.739625000000004, 33.924, 33.3135, 32.306125, 30.993624999999998, 30.413625, 30.56625, 30.169375000000002, 37.892250000000004, 39.662625, 40.853125, 42.226749999999996, 40.212125, 36.793375, 28.856875, 27.025375, 25.315875000000002, 26.262249999999998, 26.720125000000003, 27.055875, 26.536875000000002, 26.353749999999998, 25.315875000000002, 25.254875000000002, 25.804375, 25.74325, 26.323249999999998, 26.170624999999998, 25.68225, 26.536875000000002, 25.71275, 26.140124999999998, 26.140124999999998, 26.353749999999998, 28.276875, 28.15475, 28.521, 28.337875, 29.436749999999996, 27.819, 28.124250000000004, 28.948375, 29.681, 28.15475, 28.795749999999998, 27.696875, 28.917875, 28.582125, 26.96425, 29.62, 28.643125, 27.391624999999998, 29.101, 27.391624999999998, 26.750625, 26.536875000000002, 26.750625, 26.262249999999998, 26.689500000000002, 28.73475, 26.384249999999998, 26.93375, 25.68225, 25.68225, 25.499125, 26.689500000000002, 26.384249999999998, 25.285375000000002, 25.285375000000002, 26.659000000000002, 24.094875000000002, 25.315875000000002, 26.414875000000002, 25.13275, 24.644374999999997, 26.079, 27.819, 27.971625000000003, 26.99475, 26.018, 26.689500000000002, 26.87275, 27.635875, 27.819, 27.605249999999998, 28.185250000000003, 28.948375, 27.757875, 28.368375, 29.223125, 28.73475, 29.284125, 28.856875, 27.819, 27.3, 28.521, 27.391624999999998, 28.032625000000003, 27.819, 27.7885, 29.34525, 27.2695, 28.337875, 27.513749999999998, 27.971625000000003, 26.87275, 27.147375, 26.079, 26.018, 26.750625, 25.804375, 25.3465, 25.65175, 25.77375, 28.82625, 42.043625000000006, 41.03625, 40.09, 39.72375, 41.677375000000005, 41.952, 44.9435, 42.867749999999994, 41.2195, 40.0595, 40.151125, 40.731, 42.165749999999996, 40.94475, 40.883624999999995, 41.433125000000004, 42.50149999999999, 43.051, 41.25, 28.032625000000003, 39.69325, 43.264624999999995, 76.079, 48.453875000000004, 30.840999999999998, 28.09375, 34.198750000000004, 32.458749999999995, 30.901999999999997, 29.955750000000002, 28.09375, 29.467374999999997, 30.138875, 29.864125, 26.87275, 28.21575, 26.292749999999998, 27.055875, 59.168124999999996, 41.768875, 37.6785, 35.358624999999996, 39.357375000000005, 36.427, 37.342749999999995, 41.188874999999996, 41.982625, 39.72375, 38.838499999999996, 39.906875, 38.136375, 37.6785, 37.739625000000004, 34.83975, 38.228, 41.00575, 41.707875, 39.78475, 38.411125, 34.504000000000005, 25.71275, 28.612625, 26.262249999999998, 27.391624999999998, 27.452624999999998, 27.147375, 28.917875, 27.055875, 28.399, 27.452624999999998, 29.528374999999997, 27.7885, 28.368375, 28.643125, 28.276875, 28.063125000000003, 28.246375, 26.445375000000002, 27.391624999999998, 28.887375, 27.513749999999998, 27.2085, 26.323249999999998, 27.3, 27.330624999999998, 29.192625, 26.96425, 27.2695, 25.957, 28.09375, 25.4685, 25.65175, 26.323249999999998, 26.93375, 25.3465, 24.980125, 25.68225, 24.674875, 24.613875, 25.74325, 26.323249999999998, 25.315875000000002, 27.7885, 25.438000000000002, 25.71275, 26.598000000000003, 25.77375, 27.574749999999998, 26.567500000000003, 27.605249999999998, 29.467374999999997, 28.124250000000004, 29.223125, 26.109624999999998, 26.445375000000002, 27.361125, 27.88, 27.8495, 28.856875, 28.582125, 28.673625, 26.720125000000003, 28.002125000000003, 27.666375, 28.73475, 28.73475, 27.7885, 30.779874999999997, 26.567500000000003, 28.063125000000003, 27.574749999999998, 26.628500000000003, 27.2695, 27.452624999999998, 26.506375000000002, 26.170624999999998, 26.201124999999998, 26.750625, 26.292749999999998, 26.87275, 26.90325, 27.452624999999998, 27.330624999999998, 25.895875, 25.193875000000002, 25.865375, 26.536875000000002, 24.613875, 26.567500000000003, 25.68225, 25.590625, 25.895875, 26.201124999999998, 27.544249999999998, 26.262249999999998, 26.93375, 27.147375, 27.116875, 29.0705, 27.696875, 27.941125000000003, 28.76525, 26.96425, 28.521, 28.063125000000003, 27.055875, 29.497874999999997, 29.284125, 27.7885, 29.0095, 27.330624999999998, 28.887375, 28.4905, 28.4905, 26.96425, 28.15475, 27.666375, 28.4295, 27.9105, 28.917875, 27.2695, 26.567500000000003, 27.116875, 27.025375, 27.727375, 26.536875000000002, 25.3465, 26.323249999999998, 24.919125, 25.315875000000002, 26.689500000000002, 25.865375, 26.781125000000003, 25.560125, 25.77375, 25.621125, 26.842125000000003, 27.8495, 24.888625, 25.987499999999997, 28.46, 26.659000000000002, 26.536875000000002, 26.781125000000003, 28.307375, 28.704250000000002, 27.513749999999998, 27.9105, 28.551625, 28.551625, 27.696875, 28.368375, 28.46, 28.002125000000003, 28.09375, 30.047250000000002, 29.375749999999996, 28.46, 28.82625, 26.99475, 28.4295, 31.054624999999998, 28.002125000000003, 27.239, 27.330624999999998, 28.4295, 29.101, 27.178, 25.987499999999997, 27.605249999999998, 27.330624999999998, 27.88, 25.621125, 26.750625, 27.361125, 26.90325, 25.4685, 25.65175, 25.590625, 26.811625, 34.748125, 32.123, 32.36725, 30.56625, 29.558874999999997, 29.6505, 33.832375, 35.2365, 37.31225, 37.86175, 38.655375, 39.78475, 36.4575, 34.29025, 29.62, 30.62725, 31.939875, 30.2305, 31.695625, 30.413625, 28.246375, 28.185250000000003, 28.4905, 28.337875, 28.063125000000003, 27.330624999999998, 27.666375, 28.002125000000003, 27.391624999999998, 28.73475, 27.178, 27.330624999999998, 28.032625000000003, 27.2085, 27.696875, 27.025375, 27.178, 26.231624999999998, 26.414875000000002, 26.781125000000003, 27.605249999999998, 27.757875, 26.201124999999998, 26.90325, 26.720125000000003, 25.529625, 25.74325, 25.68225, 27.025375, 25.16325, 26.414875000000002, 26.018, 26.262249999999998, 25.560125, 28.21575, 26.87275, 26.536875000000002, 25.499125, 26.628500000000003, 26.99475, 26.90325, 28.063125000000003, 29.223125, 28.673625, 27.605249999999998, 27.452624999999998, 29.0095, 27.544249999999998, 27.9105, 27.971625000000003, 29.0705, 28.276875, 27.544249999999998, 29.314749999999997, 27.819, 28.856875, 28.15475, 28.21575, 27.757875, 27.086375, 28.337875, 27.605249999999998, 26.689500000000002, 25.621125, 25.315875000000002, 28.76525, 26.353749999999998, 26.598000000000003, 27.025375, 26.231624999999998, 26.170624999999998, 26.842125000000003, 27.422125, 26.99475, 25.438000000000002, 26.353749999999998, 25.71275, 25.224375000000002, 25.224375000000002, 26.750625, 27.178, 27.025375, 26.93375, 26.262249999999998, 26.96425, 26.87275, 28.76525, 28.795749999999998, 29.314749999999997, 28.82625, 29.528374999999997, 29.436749999999996, 30.138875, 29.0705, 29.192625, 27.9105, 27.605249999999998, 29.6505, 28.246375, 29.436749999999996, 30.718874999999997, 30.932499999999997, 30.077875, 28.582125, 29.528374999999997, 30.718874999999997, 28.948375, 26.96425, 27.544249999999998, 28.002125000000003, 28.09375, 28.82625, 31.695625, 30.047250000000002, 29.7115, 30.3525, 29.497874999999997, 28.4295, 27.88, 27.147375, 26.231624999999998, 26.99475, 25.68225, 25.16325, 26.109624999999998, 26.018, 26.018, 26.323249999999998, 26.689500000000002, 25.377000000000002, 26.90325, 28.643125, 27.025375, 26.567500000000003, 28.185250000000003, 29.497874999999997, 29.34525, 28.307375, 27.452624999999998, 28.063125000000003, 28.4905, 28.643125, 27.88, 28.124250000000004, 27.605249999999998, 28.21575, 28.887375, 28.887375, 30.474625, 30.749375, 29.223125, 28.82625, 28.246375, 28.246375, 29.497874999999997, 27.605249999999998, 29.314749999999997, 28.399, 27.147375, 27.239, 27.696875, 27.757875, 27.055875, 26.231624999999998, 26.170624999999998, 25.254875000000002, 26.201124999999998, 26.842125000000003, 26.842125000000003, 27.025375, 24.827499999999997, 27.574749999999998, 25.926375, 26.598000000000003, 27.391624999999998, 26.811625, 27.391624999999998, 25.957, 27.819, 26.93375, 26.90325, 28.246375, 26.292749999999998, 27.544249999999998, 26.384249999999998, 27.9105, 27.635875, 29.436749999999996, 27.452624999999998, 28.856875, 28.21575, 28.673625, 28.368375, 28.76525, 29.223125, 28.185250000000003, 28.73475, 27.330624999999998, 27.3, 27.605249999999998, 28.643125, 28.521, 27.239, 28.73475, 27.666375, 27.9105, 26.90325, 27.635875, 29.223125, 27.7885, 27.544249999999998, 26.506375000000002, 26.96425, 26.536875000000002, 26.720125000000003, 26.475875000000002, 26.689500000000002, 25.834875, 25.926375, 25.957, 25.957, 25.804375, 27.086375, 26.079, 26.109624999999998, 27.452624999999998, 26.659000000000002, 28.276875, 27.239, 26.536875000000002, 28.063125000000003, 27.9105, 27.635875, 26.842125000000003, 27.574749999999998, 29.436749999999996, 29.162125, 29.1315, 29.0705, 28.246375, 29.6505, 29.742, 29.40625, 28.063125000000003, 27.605249999999998, 28.4905, 27.971625000000003, 28.856875, 28.15475, 27.574749999999998, 27.055875, 27.361125, 27.513749999999998, 27.635875, 27.635875, 26.90325, 25.4075, 26.811625, 26.689500000000002, 26.598000000000003, 27.757875, 27.330624999999998, 25.71275, 26.353749999999998, 27.391624999999998, 26.445375000000002, 25.193875000000002, 27.025375, 24.583374999999997, 26.018, 26.018, 25.957, 24.949625, 28.46, 26.445375000000002, 27.483249999999998, 26.96425, 26.170624999999998, 27.452624999999998, 27.116875, 28.4905, 28.795749999999998, 28.673625, 27.452624999999998, 27.819, 27.819, 29.162125, 28.551625, 31.054624999999998, 28.21575, 28.673625, 29.253625, 27.88, 28.307375, 27.330624999999998, 28.643125, 28.76525, 26.87275, 28.4295, 29.34525, 26.842125000000003, 28.582125, 29.34525, 27.696875, 26.079, 25.65175, 26.811625, 27.025375, 26.628500000000003, 26.231624999999998, 28.307375, 25.957, 25.987499999999997, 25.224375000000002, 25.590625, 25.560125, 25.16325, 25.71275, 26.750625, 25.804375, 25.07175, 26.445375000000002, 25.77375, 26.231624999999998, 27.361125, 27.116875, 27.025375, 27.055875, 27.361125, 28.856875, 28.704250000000002, 29.589375000000004, 28.307375, 29.558874999999997, 29.0095, 28.978875, 30.2915, 28.46, 28.15475, 27.574749999999998, 29.34525, 30.077875, 29.894625, 29.0095, 28.82625, 27.757875, 28.46, 26.384249999999998, 28.337875, 26.231624999999998, 27.8495, 28.337875, 27.361125, 26.475875000000002, 26.506375000000002, 27.116875, 28.002125000000003, 28.856875, 28.551625, 26.659000000000002, 26.201124999999998, 28.246375, 28.978875, 27.116875, 26.93375, 27.696875, 29.162125, 29.0705, 28.276875, 28.276875, 28.582125, 29.284125, 28.551625, 29.894625, 28.09375, 30.718874999999997, 29.436749999999996, 30.169375000000002, 29.467374999999997, 28.76525, 28.612625, 28.307375, 28.521, 29.192625, 27.8495, 31.054624999999998, 28.643125, 29.833625, 28.09375, 27.819, 28.063125000000003, 27.605249999999998, 29.375749999999996, 28.032625000000003, 27.941125000000003, 27.727375, 28.73475, 27.696875, 27.391624999999998, 28.4905, 30.413625, 28.002125000000003, 32.123, 32.031375, 30.718874999999997, 31.451500000000003, 31.81775, 31.359875000000002, 30.077875, 28.76525, 29.62, 33.832375, 33.527125, 29.34525, 31.298875000000002, 29.223125, 30.962999999999997, 29.6505, 32.764, 27.971625000000003, 27.971625000000003, 25.224375000000002, 27.727375, 27.513749999999998, 29.467374999999997]

    for i in range(28):
        url = 'D:/2017.10.20 data/54/' + str(i) +'.txt'
        print(url)
        data = load_data(url)



        f_write = open("D:/2017.10.20 data/warning_529.txt",'a')

        # count用于对一条数据的维数进行计数
        count = 0
        l = len(threshold)
        anomaly_list = {}
        # 监测列表用于记录每个频点处，大于对应阈值的次数，初始每个点处的次数都为0
        monitor = [0] * l
        point_cache = [[] for x in range(l)]
        status = [False] * l
        # 对每一条数据
        for i in data:
            # 对每条待比较数据和阈值中的每个频点的比较
            for (m, n) in zip(threshold, data[i]):
                # 如果对应频点大于阈值
                if n > m:
                    # 返回字典形式，字典的key值表示产生告警时间，value值表示频点值及产生告警值大小。
                    # anomaly_list[i] = str(count / l * 100 + 200) + '|' + str(n)
                    # 监测频点处的告警次数加1
                    monitor[count] += 1
                    # 将异常频点值加入对应列表，供后续画图
                    point_cache[count].append(n)
                    # 如果某频点处大于阈值，且大于阈值的次数大于5次，记录下当前的时间
                    if n > m and monitor[count] > 10:
                        warning_dict = []
                        time1 = i.split('|')[0]
                        start_Freq = i.split('|')[1]
                        stop_Freq = i.split('|')[2]
                        collectorId = i.split('|')[3]



                        great_count = 1
                        max_point = data[i][count]
                        max_index = count
                        for k in range(count+1, count+11):
                            if data[i][k] > threshold[k]:
                                great_count += 1
                                max_point = max(max_point, data[i][k])
                                # max_index = max(max_index, k)

                        if great_count >= 5:
                            count = count + 11
                            warning_start = get_warningStartTime("under warning", "1", collectorId, time1, start_Freq,
                                                                 stop_Freq, str(count / l * 400 + 400), monitor[count])
                            break




                        # print(warning_start)
                        # self.write(warning_start)
                        # self.write(',')
                    # if monitor[count]  > 5:
                    #     status[count] = True
                    # status[count] = get_statu(monitor[count], 5)

                    # if monitor[count] % 5 == 0:
                    #     print('point ' + str(count) + ' still alert!' + str(status[count]))

                # 如果对应频点小于阈值
                if n < m:
                    # 如果当前频点小于阈值但出现大于阈值的次数大于5
                    if n < m and monitor[count] > 10:
                        # 记录下当前时间
                        time2 = i.split('|')[0]
                        start_Freq = i.split('|')[1]
                        stop_Freq = i.split('|')[2]
                        collectorId = i.split('|')[3]

                        # str(count / l * 400 + 400)
                        # 一次告警结束，给出完整告警信息
                        fullWarningInfo = get_fullWarningInfo("end warning", "1", collectorId, time1, time2,start_Freq, stop_Freq,
                                                              count, monitor[count], threshold[count], point_cache[count])

                        # test_list2.append(fullWarningInfo)
                        # self.write(fullWarningInfo)
                        # print(fullWarningInfo)
                        f_write.write(fullWarningInfo+"\n")
                        # 告警结束，将该频点超过阈值的次数置零
                        monitor[count] = 0
                        # 绘制异常频点图像
                        # draw_point(point_cache[count], count, time1, time2)
                        # 一次告警结束，异常频点列表清零
                        point_cache[count].clear()
                        status[count] = False
                    #   如果出现的是小量超过阈值的情况，可认为不是告警。此时，对应频点告警数置0，对应告警缓存清空。
                    elif n < m and 0 < monitor[count] <= 5:
                        monitor[count] = 0
                        point_cache[count].clear()
                # 对下一个频点进行检测
                count += 1
            # 一轮检测结束,count置0
            count = 0
        f_write.close()
        # return anomaly_list, monitor


# threshold = gen_threshold('E:/2017.10.20 data/32/0.txt')
get()
# if __name__ == '__main__':
#     # 创建一个应用对象
#     app = tornado.web.Application([(r'/', detect)])
#     # 绑定一个监听端口
#     app.listen(8888)
#     # 启动web程序，开始监听端口的连接
#     tornado.ioloop.IOLoop.current().start()








